@page "/category/create"
@page "/category/update/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS

<h3>CategoryUpsert</h3>

@if (IsProcessing)
{
	<div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
		<img src="/images/loader.gif" alt="loader" />
	</div>
}
else
{
	<div class="card shadow border-0 mt-4">
		<div class="card-header bg-black bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">@(Id > 0 ? "Update " : "Create ")Category</h2>
				</div>
			</div>
		</div>
		<div class="card-body p-4">
			<EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpdateCategory">
				<DataAnnotationsValidator />

				<div class="border p-3 mt-4">
					<div class="form-floating py-3 col-12">
						<InputText @bind-Value="Category.Name" class="form-control" id="Name" placeholder="Name" />
						<label for="Name">Name</label>
						<ValidationMessage For="@(() => Category.Name)" />
					</div>
					<div class="row mt-3">
						<div class="col-6 col-md-3">
							<button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
								<i class="bi bi-floppy2-fill"></i> Save
							</button>
						</div>
						<div class="col-6 col-md-3">
							<a href="category" class="btn btn-primary form-control" disabled="@IsProcessing">
								<i class="bi bi-arrow-bar-left"></i> Back to List
							</a>
						</div>
					</div>
				</div>
			</EditForm>
		</div>
	</div>
}

@code {
	[Parameter]
	public int Id { get; set; }

	private bool IsProcessing { get; set; } = true;

	[SupplyParameterFromForm]
	private Category Category { get; set; } = new Category();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadCategories();
			IsProcessing = false;
			StateHasChanged();
		}
	}

	private async Task LoadCategories()
	{
		@if (Id > 0)
		{
			Category = await _categoryRepository.GetAsync(Id);
		}
	}

	private async Task UpdateCategory()
	{
		IsProcessing = true;
		@if (Category.Id == 0)
		{
			await _categoryRepository.CreateAsync(Category);
			await _JS.ToastrSuccess("Category Created Successfully");
		}	
		else
		{
			await _categoryRepository.UpdateAsync(Category);
			await _JS.ToastrSuccess("Category Updated Successfully");
		}
		IsProcessing = false;
		_navigationManager.NavigateTo("category");
	}
}
